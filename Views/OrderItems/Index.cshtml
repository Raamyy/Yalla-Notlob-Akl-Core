@using Yalla_Notlob_Akl.ViewModels
@model OrderItemViewModel

@{
    ViewData["Title"] = "Order Items Page";
}

<head>
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <link rel="stylesheet" href="~/lib/FullTable/jquery.fulltable.css" />
</head>

<style>
    .table td, .table th {
        vertical-align: middle;
    }
    td,
    th {
        text-align: center;
        vertical-align: middle;
    }

    input {
        border-radius: 12px;
    }

    a.button {
        position: relative;
        display: inline-block;

        font-family: tahoma, arial, helvetica;
        font-size: 9pt;
        font-weight: bold;

        color: #ffffff;
        background-color: #AAAAAA;

        padding: 5px;

        text-decoration: none;

        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
    }
</style>

<div class="container">
    <h2>Order Items</h2>
    <table class="fulltable fulltable-editable table table-bordered table-hover" id="orderItems-table">
        <thead>
            <tr>
                <th fulltable-field-name="OrderItemId" hidden></th>
                <th fulltable-field-name="OrderItemPerson">Person Name</th>
                <th fulltable-field-name="OrderItemItem">Item Name</th>
                <th fulltable-field-name="OrderItemQuantity">Item Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var orderItem in Model.OrderItems)
            {
                <tr>
                    <td hidden><span>@orderItem.id</span></td>
                    <td><span>@orderItem.PersonId</span></td>
                    <td><span>@orderItem.ItemId</span></td>
                    <td><span>@orderItem.Quantity</span></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script type="text/javascript">
    $(
        function () {
            let ft = $("#orderItems-table").FullTable(
                {
                    "alwaysCreating": true,
                    "fields":
                    {
                        "OrderItemId":
                        {
                            "mandatory": false,
                            "hidden": true
                        },
                        "OrderItemPerson":
                        {
                            "mandatory": true,
                            "placeholder": "Enter person name",
                            "options": [
                                @foreach (var Person in Model.Persons)
                                {
                                    @:{ "title": "@Person.name", "value": "@Person.id"},
                                }
                            ],
                            "errors": {
                                "mandatory": "Person name is mandatory"
                            }
                        },
                        "OrderItemItem":
                        {
                            "mandatory": true,
                            "placeholder": "Enter item name",
                            "options": [
                                @foreach (var Item in Model.Items)
                                {
                                    @:{ "title": "@Item.name", "value": "@Item.id"},
                                }
                            ],
                            "errors": {
                                "mandatory": "Item name is mandatory"
                            }
                        },
                        "OrderItemQuantity":
                        {
                            "mandatory": false,
                            "type": "decimal",
                            "placeholder": "Enter item Quantity",
                            "validator": function (price) {
                                if (isNaN(price)) return false;
                                return price >= 0;
                            },
                            "errors": {
                                "type": "pelase enter a number",
                                "validator": "Item price should be a valid positive number"
                            }
                        },
                    },
                    "onRemoveRow": async function(orderItem){
                        console.log(orderItem)
                        const response = await AjaxCall("@Url.Action("Delete")", JSON.stringify({ id: orderItem.OrderItemId}))
                        return response == true;
                    },
                    "onSave": async function (orderItem) { 
                        if (orderItem.OrderItemId) { //update
                             const response = await AjaxCall("@Url.Action("Update")", JSON.stringify({ id: orderItem.OrderItemId, ItemId: orderItem.OrderItemItem, PersonId: orderItem.OrderItemPerson, Quantity: orderItem.OrderItemQuantity }))
                            return response == true;
                        } 
                        else { // create
                            const response  = await AjaxCall("@Url.Action("Add")", JSON.stringify({  ItemId: orderItem.OrderItemItem, PersonId: orderItem.OrderItemPerson, Quantity: orderItem.OrderItemQuantity  }))
                            if(response.id){
                                 $(orderItem.__dom).find("td[fulltable-field-name=OrderItemId]").find("input").val(response.id)
                                return true
                            }
                            return false; 
                        }
                    }
                }
            );

            $("#orderItems-table").FullTable("on", "error", function (errors) {
                for (var error in errors) {
                    error = errors[error];
                    console.log(error);
                }
            });
            $("orderItems-table").FullTable("draw");
        }
    );
</script>